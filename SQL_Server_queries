-- 1) Show the first name and the email address of customer with CompanyName 'Bike World'

SELECT FirstName, EmailAddress
FROM Customer
WHERE CompanyName = 'Bike World';

-- 2) Show the CompanyName for all customers with an address in City 'Dallas'.

SELECT DISTINCT CompanyName
FROM Customer
JOIN CustomerAddress ON Customer.CustomerID = CustomerAddress.CustomerID
JOIN Address ON CustomerAddress.AddressID = Address.AddressID
WHERE city = 'Dallas';

-- result:
-- CompanyName
-- Town Industries
-- Elite Bikes
-- Third Bike Store
-- Unsurpassed Bikes
-- Rental Bikes

-- 3) How many items with ListPrice more than $1000 have been sold?

SELECT COUNT(1) as '# of items'
FROM (SELECT COUNT(DISTINCT sod.productID) as num
FROM SalesOrderDetail sod
JOIN (Select Product.ProductID FROM Product Where Product.ListPrice > 1000) p ON sod.ProductID = p.ProductID
GROUP BY p.productID) a;

-- result:
-- numItem
-- 41

-- 4) Give the CompanyName of those customers with orders over $100000. Include the subtotal plus tax plus freight.

SELECT SalesOrderID, CONCAT(c.FirstName, ' ', c.LastName) AS CustName,
	c.CompanyName, soh.SubTotal, soh.TaxAmt, soh.Freight,
	soh.SubTotal+soh.TaxAmt+soh.Freight AS 'Sale Amount' 
FROM SalesOrderHeader AS soh
LEFT JOIN Customer AS c ON soh.CustomerID = c.CustomerID
WHERE soh.SubTotal+soh.TaxAmt+soh.Freight > 100000;

--  result:
-- CompanyName
-- Action Bicycle Specialists
-- Metropolitan Bicycle Supply

-- 5) Find the number of left racing socks ('Racing Socks, L') ordered by CompanyName 'Riding Cycles'.
Select CN.CompanyName, PN.OrderQty
From (Select SalesOrderID, OrderQty
From SalesOrderDetail As SOD
Join Product p
On SOD.ProductID = p.ProductID
Where p.Name = 'Racing Socks, L') As PN
Join (Select SalesOrderID, SOH.CustomerID, CompanyName
From SalesOrderHeader SOH
Join Customer c
On SOH.CustomerID = c.CustomerID
Where CompanyName = 'Riding Cycles') As CN
On PN.SalesOrderID = CN.SalesOrderID;

--  result:
--  numRacingSockL
--  3

-- 6) A "Single Item Order" is a customer order where only one item is ordered. Show the SalesOrderID and the UnitPrice for every Single Item Order.

SELECT sod.SalesOrderID, ProductID, UnitPrice
FROM SalesOrderDetail sod
JOIN (SELECT SalesOrderID FROM SalesOrderDEtail GROUP BY SalesOrderID HAVING COUNT(ProductID)=1) oo
ON sod.SalesOrderID=oo.SalesOrderID;

-- result:
-- SalesOrderID	ProductID	UnitPrice
-- 71776	907	63.9
-- 71867	717	858.9
-- 71917	875	5.39
-- 71938	973	1020.59

-- 7) Where did the racing socks go? List the product name and the CompanyName for all Customers who ordered ProductModel 'Racing Socks'.

SELECT DISTINCT p.Name, c.CompanyName
FROM ProductModel pm
JOIN Product p on p.ProductModelID = pm.ProductModelID 
JOIN SalesOrderDetail od on od.ProductID = P.ProductID 
JOIN SalesOrderHeader oh on od.SalesOrderID = oh.SalesOrderID
JOIN Customer c on oh.CustomerID = c.CustomerID 
WHERE pm.name= 'Racing Socks';

-- result:
-- Name	CompanyName
-- Racing Socks, M	Thrifty Parts and Sales
-- Racing Socks, M	Sports Products Store
-- Racing Socks, M	The Bicycle Accessories Company
-- Racing Socks, M	Remarkable Bike Store
-- Racing Socks, L	Eastside Department Store
-- Racing Socks, L	Riding Cycles
-- Racing Socks, L	Sports Products Store
-- Racing Socks, L	Essential Bike Works
-- Racing Socks, L	The Bicycle Accessories Company
-- Racing Socks, L	Remarkable Bike Store

-- 8) Show the product description for culture 'fr' for product with ProductID 736.

SELECT pd.Description, pmpd.culture, P.ProductID
FROM ProductDescription pd
JOIN ProductModelProductDescription pmpd on pd.ProductDescriptionID = pmpd.ProductDescriptionID
JOIN Product p on p.ProductModelID = pmpd.ProductModelID 
WHERE pmpd.culture = 'fr' AND P.ProductID = 736;

-- result:
-- Description
-- Le cadre LL en aluminium offre une conduite confortable, une excellente absorption des bosses pour un très bon rapport qualité-prix

-- 9) Use the SubTotal value in SaleOrderHeader to list orders from the largest to the smallest. For each order show the CompanyName and the SubTotal and the total weight of the order.

SELECT soh.SalesOrderID, c.CompanyName, soh.SubTotal, sdp.TotalWeight 
FROM SalesOrderHeader soh
JOIN (SELECT SalesOrderID, SUM(sod.OrderQty*p.Weight) as TotalWeight
    	FROM SalesOrderDetail sod
	JOIN Product p ON sod.ProductID = p.ProductID
	GROUP BY SalesOrderID) sdp ON soh.SalesOrderID = sdp.SalesOrderID
JOIN Customer c
ON soh.CustomerID = c.CustomerID
ORDER BY SubTotal DESC;
  
--   result:
-- CompanyName	SubTotal	sumWeight
-- Action Bicycle Specialists	108561.83	1133911.56
-- Metropolitan Bicycle Supply	98278.69	679588.02
-- Bulk Discount Store	88812.86	34813.05
-- Eastside Department Store	83858.43	565638.72
-- Riding Cycles	78029.69	504095.33
-- Many Bikes Store	74058.81	744328.6
-- Instruments and Parts Company	63980.99	731576.77
-- ...

-- 10) How many products in ProductCategory 'Cranksets' have been sold to an address in 'London'?

SELECT SUM(DP.salesQTY) totalProducts
FROM (SELECT SalesOrderID, SUM(OrderQty) salesQTY
	FROM SalesOrderDetail sod
	JOIN Product p ON sod.ProductID = p.ProductID
	JOIN ProductCategory pc ON p.ProductCategoryID = pc.ProductCategoryID
	WHERE pc.Name = 'Cranksets'
	GROUP BY SalesOrderID) DP
JOIN (SELECT SalesOrderID
	FROM SalesOrderHeader soh
 	JOIN Address a ON soh.ShipToAddressID = a.AddressID
 	WHERE a.City = 'London') HA ON DP.SalesOrderID = HA.SalesOrderID
GROUP BY DP.SalesOrderID
      
-- result:
-- numProducts
-- 9

-- 11) For every customer with a 'Main Office' in Dallas show AddressLine1 of the 'Main Office' and AddressLine1 of the 'Shipping' address - if there is no shipping address leave it blank. Use one row per customer.

Select Mo.CompanyName, Mo.AddressLine1 M_Ad, Sh.AddressLine1 S_Ad 
From (Select CompanyName, AddressLine1
            From CustomerAddress As CA
            Join Address As AD On CA.AddressID = AD.AddressID
            Join Customer As CT On CA.CustomerID = CT.CustomerID
            Where City = 'Dallas' And AddressType = 'Main Office') Mo
Left Join (Select CompanyName, AddressLine1
             From CustomerAddress As CA
             Join Address As AD On CA.AddressID = Ad.AddressID
             Join Customer As CT On CA.CustomerID = CT.CustomerID
             Where AddressType ='Shipping') Sh On Mo.CompanyName = Sh.CompanyName

-- Result:
-- CompanyName	mainOfficeAdd..	shippingAddre..
-- Elite Bikes	Po Box 8259024	9178 Jumping St.
-- Rental Bikes	99828 Routh Street, Suite 825	
-- Third Bike Store	2500 North Stemmons Freeway	
-- Town Industries	P.O. Box 6256916	
-- Unsurpassed Bikes	Po Box 8035996	

-- 12) For each order show the SalesOrderID and SubTotal calculated three ways:
A) From the SalesOrderHeader
B) Sum of OrderQty*UnitPrice
C) Sum of OrderQty*ListPrice (promotion amount)

SELECT oh.SalesOrderID, oh.SubTotal, 
SUM (od.OrderQty * od.UnitPrice) as SubTotal_by_UnitPrice,
SUM (od.OrderQty * p.ListPrice) as SubTotal_by_ListPrice
FROM SalesOrderHeader oh
JOIN SalesOrderDetail od on oh.SalesOrderID = od.SalesOrderID 
LEFT JOIN Product p on p.ProductID = od.ProductID 
GROUP BY oh.SalesOrderID, oh.SubTotal;

-- Result:
-- SalesOrderID	ST1	ST2	ST3
-- 71774	880.35	713.8	1189.66
-- 71776	78.81	63.9	106.5
-- 71780	38418.69	30600.81	56651.56
-- 71782	39785.33	33319.68	55533.31
-- 71783	83858.43	68141.99	121625.43
-- 71784	108561.83	90341.14	151932.58
-- ...

-- 13) Show the best selling item by value.

-- method 1:
SELECT * 
FROM (SELECT ProductID, Sum(OrderQty*UnitPrice) AS 'Value', 
	RANK() OVER (PARTITION BY 1 ORDER BY Sum(OrderQty*UnitPrice) DESC) AS Rank  
	FROM SalesOrderDetail SOD GROUP BY ProductID) base
WHERE Rank=1;

-- method 2:
SELECT Top 1 Name, Sum(OrderQty) As 'Total Qty',  
	Sum(UnitPrice) As 'Total Price', Sum(OrderQty*UnitPrice) As 'Value'
FROM SalesOrderDetail SOD
JOIN Product PD ON SOD.ProductID = PD.ProductID
GROUP BY Name
ORDER BY 'Value' Desc;

-- result:
-- Name	Value	rn
-- Touring-1000 Blue, 60	37191.44	1

-- 14) Show how many orders are in the following ranges (in $):
    RANGE      Num Orders      Total Value
    0-  99
  100- 999
 1000-9999
10000-

SELECT X.Range,  SUM(1) AS '# Of Orders', SUM(X.SubTotal) AS 'Total Value'
FROM (SELECT CASE WHEN SubTotal < 100 Then '0-99'
	WHEN SubTotal Between 100 And 999 Then '100-999'
	WHEN SubTotal Between 1000 And 9999 Then '1000-9999'
	WHEN SubTotal > 10000 Then '10000-' Else '' End As 'Range', 
	1 AS 'NumOrder', SubTotal
	From SalesOrderHeader As SOD) AS X
GROUP BY X.Range;

-- Result:
-- RANGE	Num orders	Total Value
-- 0 - 99	129	6576.02
-- 100-999	225	90859.33
-- 1000-9999	138	433813.21
-- 10000-	8	113661.13

-- 15) Identify the three most important cities. Show the break down of top level product category against city.

Select * 
From (Select ee.City, dd.ProductCateName, sum(Tot) As Total, 
        rank() over (Partition by ee.city order by sum(tot) desc) as Ranknum
        From (Select SalesOrderId, 
		cc.Name ProductCateName, 
        	Sum(OrderQty*UnitPrice)  Tot
                From SalesOrderDetail aa
                Join Product bb On aa.ProductID=bb.ProductID
                Join ProductCategory cc On bb.ProductCategoryID=cc.ProductCategoryID
                Group by SalesOrderId, cc.Name ) dd
              JOIN (Select bb.City, SalesOrderID, SubTotal
		From SalesOrderHeader aa 
                Join Address bb On aa.ShipToAddressID=bb.AddressID
                Join (Select top 3 City
   			From SalesOrderHeader aa 
   			Join Address bb On aa.ShipToAddressID=bb.AddressID
   			Group by City  
   			Order by sum(SubTotal) desc) CC On bb.City=CC.City) ee 
                On dd.SalesOrderID=ee.SalesOrderID
                Group by ee.City, dd.ProductCateName) ddd
Where Ranknum=1

-- step by step:
-- select 3  city
select top 3 * from(select Address.City, sum(SalesOrderDetail.OrderQty * SalesOrderDetail.UnitPrice) as TotalSales
from SalesOrderDetail
 join product on SalesOrderDetail.ProductID = product.ProductID
 join SalesOrderHeader on SalesOrderDetail.SalesOrderID = SalesOrderHeader.SalesOrderID
 join Customer on SalesOrderHeader.CustomerID = Customer.CustomerID
 join CustomerAddress on Customer.CustomerID = CustomerAddress.CustomerID
 join Address on CustomerAddress.AddressID = Address.AddressID
group by Address.City
order by TotalSales desc;
)a

-- Result:
-- City	TotalSales
-- Woolston	90341.14
-- London	85245.8
-- Union City	68141.99
-- Liverpool	65218.2
-- Fullerton	60526.52
-- Gloucestershire	53248.57

-- # select top level product category

select Address.City, ProductCategory.Name as product_Category_Name, max(sum(SalesOrderDetail.OrderQty * SalesOrderDetail.UnitPrice) as TotalSales)
from ()
  join SalesOrderHeader on Address.AddressID = SalesOrderHeader.ShipToAddressID
  join SalesOrderDetail on SalesOrderHeader.SalesOrderID = SalesOrderDetail.SalesOrderID
  join Product on SalesOrderDetail.ProductID = Product.ProductID
  join ProductCategory on Product.ProductCategoryID = ProductCategory.ProductCategoryID
where Address.City in ('Woolston', 'Woolston', 'London')
group by Address.City, ProductCategory.Name
order by TotalSales desc, ProductCategory.Name;

-- Result:
-- City	ProductCateName	Total	Ranknum
-- London	Mountain Bikes	50881.99	1
-- Union City	Road Bikes	53478.76	1
-- Woolston	Touring Bikes	77040.15	1



-- 1) List the SalesOrderNumber for the customer 'Good Toys' 'Bike World'.

SELECT SalesOrderID AS SalesOrderNumber
FROM SalesOrderHeader 
WHERE CustomerID IN (SELECT CustomerID FROM Customer
WHERE CompanyName IN ('Good Toys', 'Bike World'))

-- result:  
-- SalesOrderID	CompanyName
--               Bike World
-- 71774	        Good Toys

-- 2) List the ProductName and the quantity of what was ordered by 'Futuristic Bikes'.
SELECT Name, Sum(OrderQty) AS OrderQty
FROM SalesOrderDetail sd
JOIN product pd ON sd.Productid=pd.Productid
WHERE SalesOrderID IN (SELECT SalesOrderID 
                        FROM SalesOrderHeader SH
                        WHERE CustomerID in (SELECT CustomerID
                                              FROM Customer
                                              WHERE CompanyName ='Futuristic Bikes'))
GROUP BY Name

-- Result:
-- Name	OrderQty
-- ML Mountain Seat/Saddle	2
-- Long-Sleeve Logo Jersey, L	2
-- Classic Vest, S	3

-- 3) List the name and addresses of companies containing the word 'Bike' (upper or lower case) and companies containing 'cycle' (upper or lower case). Ensure that the 'bike's are listed before the 'cycles's.

SELECT (CASE WHEN UPPER(CompanyName) LIKE '%BIKE%' THEN 'Bike'
        ELSE 'Cycle' END) AS Keyword,
	CompanyName, AddressLine1
FROM Customer c
JOIN CustomerAddress ca ON c.CustomerID = ca.CustomerID AND ca.AddressType = 'Main Office'
JOIN Address a ON ca.AddressID = a.AddressID
WHERE UPPER(CompanyName) LIKE '%BIKE%' or UPPER(CompanyName) LIKE '%CYCLE%'
ORDER BY Keyword;

-- result:
-- CompanyName	AddressLine1	AddressLine2	City	StateProvince	CountyRegion	PostalCode
-- A Bike Store	2251 Elliot Avenue	NULL	Seattle	Washington	United States	98104
-- A Typical Bike Shop	One Dancing, Rr No. 25	Box 8033	Round Rock	Texas	United States	78664
-- Advanced Bike Components	12345 Sterling Avenue	NULL	Irving	Texas	United States	75061
-- Area Bike Accessories	6900 Sisk Road	NULL	Modesto	California	United States	95354
-- Associated Bikes	5420 West 22500 South	NULL	Salt Lake City	Utah	United States	84101
-- Authorized Bike Sales and Rental	490 Ne 4th St	NULL	Renton	Washington	United States	98055
-- Basic Bike Company	15 East Main	NULL	Port Orchard	Washington	United States	98366
-- Best o' Bikes	250880 Baur Blvd	NULL	Saint Louis	Missouri	United States	63103
-- Big-Time Bike Store	9909 W. Ventura Boulevard	NULL	Camarillo	California	United States	93010
-- Bike Dealers Association	9952 E. Lohman Ave.	NULL	Las Cruces	New Mexico	United States	88001

-- 4) Show the total order value for each CountryRegion. List by value with the highest first.

SELECT CountyRegion, SUM(SubTotal) AS 'SubTotal'
FROM SalesOrderHeader AS SOH
JOIN Address AS AD ON SOH.ShipToAddressID = AD.AddressID
GROUP BY CountyRegion
ORDER BY 'SubTotal' DESC;

-- Result:
-- CountyRegion	SumRegion
-- United Kingdom	518096.42
-- United States	347336.69

-- 5) Find the best customer in each region.

SELECT CountyRegion, CompanyName, SubTotal
FROM (SELECT CountyRegion, CustomerID, SUM(SubTotal) AS 'SubTotal',
		Rank() over (PARTITION BY CountyRegion ORDER BY SUM(SubTotal) DESC) AS Rnum
        FROM SalesOrderHEader AS SOH
	JOIN Address AS AD ON SOH.ShipToAddressID = AD.AddressID
	GROUP BY CountyRegion, CustomerID) AS SBQ
	JOIN Customer CU ON SBQ.CustomerID = CU.CustomerID
WHERE Rnum = 1;

-- result:
-- CountyRegion	CustomerID	reTotal
-- United Kingdom	448	108561.83
-- United States	24	83858.43

Some extra insights 

-- (DAU) Daily Active Customer Percentage

SELECT (COUNT(DISTINCT c.CustomerID) * 100.0) / (SELECT COUNT(DISTINCT CustomerID) FROM SAW.Customer) AS 'Daily Active Customer Percentage'
FROM Customer c
JOIN SalesOrderHeader oh ON c.CustomerID = oh.CustomerID;

-- Product profit margin 

SELECT PM.ProductModelID, PM.Name AS ProductModelName,
    (SUM(SD.UnitPrice * SD.OrderQty) - SUM(P.StandardCost * SD.OrderQty)) / SUM(SD.UnitPrice * SD.OrderQty) * 100 AS ProfitMargin
FROM ProductModel PM
JOIN Product P ON PM.ProductModelID = P.ProductModelID
LEFT JOIN SalesOrderDetail SD ON P.ProductID = SD.ProductID
GROUP BY PM.ProductModelID, PM.Name
ORDER BY ProfitMargin DESC;

-- Order customers by total sales (Customer Lifetime Value (CLV) Analysis OF ONE DAY)

SELECT C.CustomerID, C.FirstName, C.LastName, SUM(SH.SubTotal) AS TotalSales
FROM Customer C
JOIN SalesOrderHeader SH ON C.CustomerID = SH.CustomerID
GROUP BY C.CustomerID, C.FirstName, C.LastName
ORDER BY TotalSales DESC;

-- TOTAL ORDER COUNT per Customer

SELECT 
    C.CustomerID,
    C.FirstName,
    C.LastName,
    COUNT(SH.SalesOrderID) AS OrderCount
FROM Customer C
JOIN SalesOrderHeader SH ON C.CustomerID = SH.CustomerID
JOIN SalesOrderDetail SD ON SH.SalesOrderID = SD.SalesOrderID
JOIN Product P ON SD.ProductID = P.ProductID
JOIN ProductCategory PC ON P.ProductCategoryID = PC.ProductCategoryID
GROUP BY C.CustomerID, C.FirstName, C.LastName
ORDER BY OrderCount DESC
OFFSET     0 ROWS      
FETCH NEXT 10 ROWS ONLY;

-- Geographic Distribution

SELECT City, StateProvince, CountyRegion, PostalCode,
    COUNT(*) AS CustomerCount
FROM Address
JOIN CustomerAddress CA ON Address.AddressID = CA.AddressID
GROUP BY City, StateProvince, CountyRegion, PostalCode
ORDER BY CustomerCount DESC;

-- Customer Segmentation by Product Category

SELECT C.CustomerID, C.FirstName, C.LastName, PC.Name AS ProductCategory,
    COUNT(SH.SalesOrderID) AS OrderCount
FROM Customer C
JOIN SalesOrderHeader SH ON C.CustomerID = SH.CustomerID
JOIN SalesOrderDetail SD ON SH.SalesOrderID = SD.SalesOrderID
JOIN Product P ON SD.ProductID = P.ProductID
JOIN ProductCategory PC ON P.ProductCategoryID = PC.ProductCategoryID
GROUP BY C.CustomerID, C.FirstName, C.LastName, PC.Name
ORDER BY C.CustomerID, OrderCount DESC;

-- Top Salespersons by Revenue:

SELECT C.SalesPerson, SUM(SH.SubTotal) AS TotalSales
FROM Customer C
JOIN SalesOrderHeader SH ON C.CustomerID = SH.CustomerID
GROUP BY C.SalesPerson
ORDER BY TotalSales DESC;

-- Total Product Sold and Sales 
SELECT P.ProductID, P.Name AS ProductName, SUM(SD.OrderQty) AS TotalQuantitySold,
	SUM(SubTotal) AS TotalSales
FROM Product P
JOIN SalesOrderDetail SD ON P.ProductID = SD.ProductID
JOIN SalesOrderHeader SH ON SD.SalesOrderID = SH.SalesOrderID
GROUP BY P.ProductID, P.Name
ORDER BY TotalQuantitySold DESC;

-- View the details of Individual Sales Orders

SELECT 
    SH.SalesOrderID,
    C.CustomerID,
    C.FirstName,
    C.LastName,
    SD.ProductID,
    P.Name AS ProductName,
    SD.OrderQty,
    SD.UnitPrice,
    SD.UnitPriceDiscount,
    SD.OrderQty * SD.UnitPrice AS TotalPrice
FROM SalesOrderHeader SH
JOIN Customer C ON SH.CustomerID = C.CustomerID
JOIN SalesOrderDetail SD ON SH.SalesOrderID = SD.SalesOrderID
JOIN Product P ON SD.ProductID = P.ProductID
Order by SH.SalesOrderID;

-- Top-Selling Products: by Qty
SELECT 
    P.ProductID,
    P.Name AS ProductName,
    P.Color,
    SUM(SD.OrderQty) AS TotalQuantitySold
FROM Product P
JOIN SalesOrderDetail SD ON P.ProductID = SD.ProductID
GROUP BY P.ProductID, P.Name, P.Color
ORDER BY TotalQuantitySold DESC;

-- Product Sales Revenue:

SELECT 
    P.ProductID,
    P.Name AS ProductName,
    P.Color,
    SUM(SD.OrderQty * SD.UnitPrice) AS TotalRevenue
FROM Product P
JOIN SalesOrderDetail SD ON P.ProductID = SD.ProductID
GROUP BY P.ProductID, P.Name, P.Color
ORDER BY TotalRevenue DESC;

-- Average Order Quantity by Product Category:

SELECT 
    PC.ProductCategoryID,
    PC.Name AS CategoryName,
    AVG(SD.OrderQty) AS AverageOrderQuantity
FROM Product P
JOIN SalesOrderDetail SD ON P.ProductID = SD.ProductID
JOIN ProductCategory PC ON P.ProductCategoryID = PC.ProductCategoryID
GROUP BY PC.ProductCategoryID, PC.Name
ORDER BY AverageOrderQuantity DESC;

-- Product Categories and Customer Demand:  Total Quantity Sold

SELECT 
    PC.ProductCategoryID,
    PC.Name AS CategoryName,
    SUM(SD.OrderQty) AS TotalQuantitySold
FROM Product P
JOIN SalesOrderDetail SD ON P.ProductID = SD.ProductID
JOIN ProductCategory PC ON P.ProductCategoryID = PC.ProductCategoryID
GROUP BY PC.ProductCategoryID, PC.Name
ORDER BY TotalQuantitySold DESC;

-- Culture: number of products

SELECT
    pdd.Culture,
    COUNT(*) AS NumberOfProducts,
FROM ProductDescription pd
JOIN ProductModelProductDescription pdd on pd.ProductDescriptionID = pdd.ProductDescriptionID
GROUP BY pdd.Culture
ORDER BY NumberOfProducts DESC;

-- Order Detail Analysis

SELECT ProductID, AVG(OrderQty) AS AverageQuantity, AVG(UnitPrice) AS AverageUnitPrice
FROM SalesOrderDetail
GROUP BY ProductID;

-- Product Unit Price Distribution

SELECT 
    ProductID,
    MIN(UnitPrice) AS MinUnitPrice,
    MAX(UnitPrice) AS MaxUnitPrice,
    AVG(UnitPrice) AS AvgUnitPrice,
    COUNT(*) AS NumberOfOrders
FROM SalesOrderDetail
GROUP BY ProductID;
